generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum TipoPagamento {
  CartaoCredito
  CartaoDebito
  Dinheiro
  Pix
}

enum TipoCartao {
  DEBITO
  CREDITO
}

// Models
model Usuario {
  id           Int         @id @default(autoincrement())
  nome         String
  email        String      @unique
  senha        String
  imagemPerfil String?
  tipo         String // 'CLIENTE' ou 'FORNECEDOR'
  endereco     Endereco?  
  cartoes      Cartao[]
  cliente      Cliente?
  fornecedor   Fornecedor?
}

model Endereco {
  id          Int     @id @default(autoincrement())
  rua         String
  bairro      String
  cep         String
  numero      String
  complemento String
  usuario     Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId   Int     @unique
}

model Cartao {
  id           Int        @id @default(autoincrement())
  tipoCartao   TipoCartao
  numeroCartao String
  cvc          Int
  nomeCartao   String
  dataValidade DateTime
  usuarioId    Int
  usuario      Usuario    @relation(fields: [usuarioId], references: [id])
}

model Cliente {
  id       Int              @id
  usuario  Usuario          @relation(fields: [id], references: [id])
  cupons   Cupom[]
  carrinho CarrinhoCompras?
}

model Fornecedor {
  id             Int             @id
  usuario        Usuario         @relation(fields: [id], references: [id])
  avaliacaoTotal Float
  avaliacoes     Avaliacao[]
  dadosBancarios DadosBancarios?
  produtos       Produto[]
  servicos       Servico[]
}

model DadosBancarios {
  id           Int        @id @default(autoincrement())
  idBanco      String
  numAgencia   String
  tipoConta    String
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])
  fornecedorId Int        @unique
}

model Cupom {
  id           Int      @id @default(autoincrement())
  nome         String
  dataValidade DateTime
  desconto     Float
  clienteId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id])
}

model CarrinhoCompras {
  id        Int     @id @default(autoincrement())
  clienteId Int     @unique
  cliente   Cliente @relation(fields: [clienteId], references: [id])
  items     Item[]
}

model Item {
  id         Int             @id @default(autoincrement())
  nome       String
  valor      Float
  carrinhoId Int
  carrinho   CarrinhoCompras @relation(fields: [carrinhoId], references: [id])

  produtoId Int?     @unique
  produto   Produto? @relation(fields: [produtoId], references: [id], name: "ItemProduto")

  servicoId Int?     @unique
  servico   Servico? @relation(fields: [servicoId], references: [id], name: "ItemServico")
}

model Produto {
  id           Int        @id @default(autoincrement())
  nome         String
  valor        Float
  quantidade   Float
  fornecedorId Int
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])

  item Item? @relation(name: "ItemProduto")
}

model Servico {
  id           Int        @id @default(autoincrement())
  nome         String
  valor        Float
  dataAgendada DateTime
  fornecedorId Int
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])

  item Item? @relation(name: "ItemServico")
}

model Avaliacao {
  id           Int        @id @default(autoincrement())
  nota         Float
  fornecedorId Int
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])
}
